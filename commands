#NO DOCKER

#execute test
java -jar -Dactivemq.hostname=localhost event-client-1.0.2.jar

#view activemq
Open http://localhost:8161/admin/queues.jsp

#view Hawtio
java -jar hawtio-app.jar --port 8090

http://localhost:8090/hawtio

#Start ActiveMQ
./activemq start

#Build Demo (in each sub-project, in order)
mvn clean install

#Start Microservices
mvn spring-boot:run -Drun.arguments="-Xmx256m,-Xms128m"

#Execute Tests
java -jar -Dactivemq.hostname=localhost event-client-1.0.2.jar Leon
java -jar -Dactivemq.hostname=localhost event-client-1.0.2.jar Roy
java -jar -Dactivemq.hostname=localhost event-client-1.0.2.jar Eldon

#DOCKER

#Execute Test
docker network create messaging-network

docker run -d -p 61616:61616 -p 8161:8161 --net=messaging-network --hostname event-broker --name event-broker rmohr/activemq:5.14.3-alpine

docker run -e PATIENT='Roy' --net=messaging-network jtdeane/event-client:latest

#View activemq
Open http://localhost:8161/admin/queues.jsp

#view hawtio
docker run -d -p 8090:8090 --net=messaging-network indigo/hawtio:latest

http://localhost:8090/hawtio


#Portainer - Create Volume
docker volume create portainer_data

#Execute Portainer
docker run -d -p 9898:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

#View Portainer (change admin password first time)
http://localhost:9898/#/auth


#Start Demo
docker-compose up

#Capture Docker Compose Network
docker network ls

#set docker compose network e.g. microservices_default
docker run -e PATIENT='Leon' --net=microservices_default jtdeane/event-client:latest
docker run -e PATIENT='Roy' --net=microservices_default jtdeane/event-client:latest
docker run -e PATIENT='Eldon' --net=microservices_default jtdeane/event-client:latest